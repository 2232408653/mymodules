<odoo>
    <data>
        <record id="view_form_bug_ui" model="ir.ui.view">
            <field name="model">ds_bug</field>
            <field name="priority">15</field>
            <field name="arch" type="xml">
                <form>
                    <header>
                        <!--按钮、状态等组件-->
                        <!--文章的头部（header）通常包含文档的生命周期或步骤以及相关的操作按钮。
                这些操作按钮是常规表单的按钮，可以使用class="oe_highlight"突出显示最重要的阶段或步骤。
                文档的生命周期在字段上是使用statusbar元素，该元素表示文档在当前所在的生命周期中的点。
                        这通常是状态（State）选择字段或阶段（Stage）多对一字段。
                        这两个字段可以在多个Odoo核心模块中找到。
                        Stage是一个多对一的字段，它的原理是后台可使用支持模型来设置流程的各个步骤。
                        因此，最终用户可以动态配置它以适应其特定的业务流程，其能够非常完美地支持看板。
                        State是一个选择列表，其包含一个过程中相当稳定的步骤，
                        如新建、处理中和完成。最终用户无法配置它，但由于它是静态的，
                        因此在业务逻辑中使用起来要容易得多。
                        视图字段甚至对State提供了特殊支持：
                            states字段属性允许仅在记录处于某些状态时才可供用户使用。
                        回归Odoo的历史，Stage的引入要晚于State。
                        目前两者都可以使用，不过从Odoo核心模块的源码来看，趋势是Stage取代State。
                        但是，如前面所解释的，State仍然能提供Stage不具备的某些功能。
                        将Stage映射到State，可以产生一加一大于二的效果。-->
                        <field name="stage" invisible="True" />
                        <button name="do_close" type="object" string="关闭" attrs="{'invisible':[('stage','in',['draft'])]}"
                                class="oe_highlight" />
                        <field name="stage_id"
                               widget="stage_id"
                               clickable="True"
                               options="{'fold_field':'fold'}" />
                        <!--在这里，我们在状态栏中添加一个关闭按钮，让用户关闭已完成的bug。attrs属性用于使此按钮仅对处于完成状态的bug可见。执行此操作的条件是使用状态字段，该字段将不会显示在表单上。但是，为了使可见性切换的条件起作用，需要在Web客户端用到加载的所有值。由于我们不打算让最终用户能够使用状态字段，因此我们需要将其添加为不可见字段。
在项目中也需要注意，在domain或attrs表达式中使用的字段必须被加载到视图中，并且必须有一个<field>元素。如果不想让用户看到该字段，那么就将它们加载为一个不可见的字段元素。
除了上面的显式切换方式，也可以选择使用states=“open，done”，这样就可以通过states字段属性而不是attrs来实现相同的效果。虽然它不像attrs属性那样灵活，但它更为简洁。
attrs和states元素的可见性功能也可用于其他视图元素，如字段。这将在本章的后面进行深入探讨。
接下来，添加状态栏组件以显示文档所在的阶段。其实在技术上，它就是为stage_id字段赋值statusbar的<field>元素。
clickable属性允许用户通过单击状态栏来更改文档所处的阶段。我们一般都会启用此功能，但也有一些业务上不允许的情况，例如当我们需要对工作流程进行更多的控制，并要求用户仅使用可用的操作按钮来完成各个阶段时。也就是说有些时候我们需要经过特定的验证才会允许阶段的变化。
当使用带有阶段的状态栏组件时，我们可以在更多阶段组中隐藏（折叠）很少使用的阶段。相应的阶段模型必须要有一个标志来配置需要隐藏的标记，其通常命名为fold。然后，状态栏组件应使用options属性（如上面的代码所示），以将此字段名称提供给fold_field选项。
状态栏也可以与状态（state）而不是阶段（stage）一起使用。在这种情况下，要列出状态栏中可用的状态，应使用statusbar_visible属性而不是fold_field选项。如果将statusbar_visible用于bug表单，那么它的内容将如下所示：
1.    <field name="state"
2.      widget="statusbar"
3.      clickable="True"
4.      statusbar_visible="draft,open,done" />
-->
                    </header>
                    <sheet>
                        <!--工作表（sheet）是放置实际数据元素表单的主要区域。
                        工作表被设计得看起来像一个实际的纸质文档，并且在Odoo文档中，
                        工作表通常被称为文档（document）。
                        文档（sheet）一般具有以下区域。
                        左上角的文档标题和副标题。
                        右上角的按钮框。
                        其他文档主体区域字段。
                        底部的笔记本，可用于组织成标签页、联系方式或页面的其他字段。-->
                        <!--（1）标题、副标题
                        我们一般使用<h1>、<h2>等HTML语言来标记标题、副标题，但是在XML文件中，
                        如果元素在<group>之外则不会自动产生标签（<label>），
                        所以我们需要在XML中手动添加<label>。
                        一般来说，还需要添加一些页面渲染效果，
                        我们可以将标题部分放到<div>标签内，
                        并且为该标签引入CSS的类oe_title。-->
                        <!--表单主体内容-->
                        <div class="oe_title">
                            <label for="name" class="oe_edit_only" />
                            <h1><field name="name" /> </h1>
                            <h3>
                                <span class="oe_read_only">创建者</span>
                                <!--<label>元素用于控制字段标签的显示时间和位置。for属性则标识我们获取标签文本的字段。
                                读者也可以选择使用string属性来替代for属性，不过，Odoo源码中大多是使用for属性。
                                示例中还将使用class="oe_edit_only"属性，以使该标签字段仅在编辑模式下可见。-->
                                <label for="user_id" class="oe_edit_only" />
                                <field name="user_id" class="oe_inline" />
                            </h3>
                        </div>
                    </sheet>
                    <!--联系组件-->
                    <div class="oe_chatter">
                        <field name="message_follower_ids" widget="mail_followers" />
                        <field name="message_ids" widget="mail_thread" />
                    </div>
                </form>
            </field>
        </record>
    </data>
</odoo>
<!--不依赖于字段类型的通用属性，具体如下。
·name标示该字段的数据库名字。
·string标签文本，模型里面也有这个属性，如果我们在XML内设定该属性，则会覆盖原来模型内的设定。
·help用于设置字段的提示信息，当鼠标悬停的时候会出现，XML中的设置会覆盖模型中该属性的设定。
·placeholder表示在输入信息之前在字段内显示的提示文本。
·widget如果不想使用系统为字段默认设定的展示组件，则可以在属性中进行调整。
·options本属性用于为字段使用的窗口组件写JSON数据结构，具体要如何编写则应根据使用的显示组件而定。
class是为字段提供渲染的CSS类。
·nolabel="True"<group>内的元素是字段添加标签的，如果自己已添加了标签<label for="…">，那么就可以通过该属性禁止自动添加的标签属性。
·invisible="True"使所在字段不显示。不过字段的数据已经被加载，并且可以使用。
·readonly="True"使该字段不可编辑。
·required="True"设置该字段并使其成为必输入项。-->
<!--
以上是与字段类型无关的属性，下面再来介绍几个与字段类型相关的属性。
password="True"文本类型的字段可以使用该属性，设置此属性后字符会以密码的形式显示而不是显示明文。
filename可用于存储二进制文件上传目的模型的模型名称。
mode可用于one2many字段，以指定显示记录的视图类型，默认是树。
-->
<!--
视图字段的标签。
<label>元素可用于更好地显示字段标签。很多时候是仅在表单处于编辑模式时显示标签：
1.    <label for="name" class="oe_edit_only" />

如此使用时，如果该字段位于<group>元素内，那么通常还要在其上设置nolabel="True"。
在视图字段的使用上，对于关联字段的使用这里还需要单独介绍下。
在关联字段中，可以对用户的可执行操作进行一些附加的控制。默认情况下，用户可以从这些字段创建新记录（也称为“快捷创建”）并打开相关记录表单。可以使用options字段属性禁用此功能：
1.    options="{'no_open': True, 'no_create': True}"

上下文（context）和域（domain）也是关联字段可用的属性，而且特别有用。
context可以定义关联记录的默认值，domain可以限制可选记录。一个常见的示例是为某个字段生成列表选项时，其值取决于另一个字段。字段的domain可以直接在模型中进行定义，也可以在视图中进行定义从而完成覆盖。
还可以使用mode属性来更改用于显示记录的视图类型。前面提到的默认是树形视图，可通过此属性将其改成表单、看板或图形。
视图字段除了属性和标签之外，还有一些可用于提升显示效果的组件。
每个字段类型都有显示时使用的默认组件。但是我们可以手动调整效果组件以替代默认组件。
对于文本类型的字段，我们可以选择使用如下组件。
·email可用于对邮件中“发送至”的地址进行显示。
·url可将文字处理成可以点击的超链接。
·html可用于将文本呈现为HTML内容。在编辑模式下，它是一个WYSIWYG编辑器，允许格式化内容，而无须使用HTML语法。
对于数值类型字段，可以选择使用如下组件。
·handle是专门为列表视图中的序列字段设计的，其将显示一个句柄，允许拖动以调整顺序。
·float_time格式化浮点字段，时间可以精确到小时和分钟。
·monetary显示浮点值货币金额。它需要一个currency_id的绑定字段，但另一个字段名称可以通过options="{'currency_field'：'currency_id'}"来提供。
·progressbar以百分比的形式来展示浮点数，一般可用于完成率等字段。
对于关联字段和选择字段，我们还提供了如下组件。
·many2many_tags将值显示为一列按钮标签。
selection多对一字段使用的选项列表组件。
·radio选项列表的单项使用按钮。
·priority将字段值以星级打分的形式展现。
·state_selection为看板状态的选项列表展示一个信号灯，正常用灰色表示、完成用绿色表示、其他用红色表示。
-->