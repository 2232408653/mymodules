<odoo>
    <data>
        <!--  -->
        <!--   <record id="object0" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 0</field> -->
        <!--     <field name="value">0</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object1" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 1</field> -->
        <!--     <field name="value">10</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object2" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 2</field> -->
        <!--     <field name="value">20</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object3" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 3</field> -->
        <!--     <field name="value">30</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object4" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 4</field> -->
        <!--     <field name="value">40</field> -->
        <!--   </record> -->
        <!--  -->
        <!--
        XML文件内较为重要的几种用法 :
            noupdate属性:
                当应用更新的时候，会重新加载数据文件，
                数据将被重新写入模型，这里可根据外部ID判断是进行重写还是新增。
                不过有的时候我们不希望数据被重写，也不希望文件的数据再重新插入一次，
                因为很有可能，我们已经修改或删除了上次导入的数据，
                这时候就需要用noupdate该属性。
                noupdate属性是在XML文件的<odoo>或者<data>元素中使用的，
                默认noupdate的值为0。若设置noupdate=1，则意味着该文件的数据只在安装的时候加载一次，
                后续的应用更新不会再加载。一般是在初始化系统的一些配置信息的时候使用，
                此类信息在系统安装后的使用方式就是使用前端页面进行修改，
                比如前面提到的访问控制信息。
                noupdate属性是与外部ID一起存储的，
                可以在前端页面找到外部ID的界面，
                然后直接在前端修改该属性，
            字段的表达式值:
                前面已经介绍过，在XML文件中可使用<record>元素定义记录，
                每个<record>至少有两个属性，id和model。
                在其中再使用<field>元素来定义字段，并使用里面的name属性来引入数据模型的字字段名。
                如果要在XML文件中写入数据，则可在<field>和</field>之间写入字段值，也可以写入表达式。
                可以通过eval属性引入Python表达式，并且结果值会被赋予字段。
                一般表达式内可以使用Python的一些内置模块。


        -->
    </data>
</odoo>