<odoo>
    <data>
        <!--  -->
        <!--   <record id="object0" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 0</field> -->
        <!--     <field name="value">0</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object1" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 1</field> -->
        <!--     <field name="value">10</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object2" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 2</field> -->
        <!--     <field name="value">20</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object3" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 3</field> -->
        <!--     <field name="value">30</field> -->
        <!--   </record> -->
        <!--  -->
        <!--   <record id="object4" model="ds_bug.ds_bug"> -->
        <!--     <field name="name">Object 4</field> -->
        <!--     <field name="value">40</field> -->
        <!--   </record> -->
        <!--  -->
        <!--
        XML文件内较为重要的几种用法 :
            noupdate属性:
                当应用更新的时候，会重新加载数据文件，
                数据将被重新写入模型，这里可根据外部ID判断是进行重写还是新增。
                不过有的时候我们不希望数据被重写，也不希望文件的数据再重新插入一次，
                因为很有可能，我们已经修改或删除了上次导入的数据，
                这时候就需要用noupdate该属性。
                noupdate属性是在XML文件的<odoo>或者<data>元素中使用的，
                默认noupdate的值为0。若设置noupdate=1，则意味着该文件的数据只在安装的时候加载一次，
                后续的应用更新不会再加载。一般是在初始化系统的一些配置信息的时候使用，
                此类信息在系统安装后的使用方式就是使用前端页面进行修改，
                比如前面提到的访问控制信息。
                noupdate属性是与外部ID一起存储的，
                可以在前端页面找到外部ID的界面，
                然后直接在前端修改该属性，
            字段的表达式值:
                前面已经介绍过，在XML文件中可使用<record>元素定义记录，
                每个<record>至少有两个属性，id和model。
                在其中再使用<field>元素来定义字段，并使用里面的name属性来引入数据模型的字字段名。
                如果要在XML文件中写入数据，则可在<field>和</field>之间写入字段值，也可以写入表达式。
                可以通过eval属性引入Python表达式，并且结果值会被赋予字段。
                一般表达式内可以使用Python的一些内置模块。
        -->
        <!--
        如果要在XML文件中写入数据，则可在<field>和</field>之间写入字段值，也可以写入表达式。可以通过eval属性引入Python表达式，并且结果值会被赋予字段。一般表达式内可以使用Python的一些内置模块。
比如，如果要在表达式内处理日期则可使用Python的模块：time、datetime、timedelta和relativedelta。一般来说，我们在演示数据时经常要设定一些字段值，让用户感觉此值是刚刚创建的，创建日期等字段一般都是使用类似的表达式来进行计算。比如我们编写一个计算昨天的表达式，代码如下：
1.    <field name="change_date" eval="(datetime.now()+timedelta(-1)).strftime ('%Y-%m-%d')"/>

我们也可以使用函数将外部ID转换成数据库记录的ID，这对于关联字段来说是非常有帮助的，比如我们在关注者字段中使用如下代码：
1.    <field name="follower_id" eval="ref('base.group_user')"/>

使用ref()函数可以为many2one关系赋值，我们使用的方式是为函数传递模型名称作为参数。其实还有另外一种使用方式，就是直接使用ref参数，为其赋值外部ID。示例代码如下：
1.    <field name="follower_id" ref="base.user_root"/>

这是many2one的使用方式，如果是one2many或many2many的关系，则在使用的时候需要传递多个外部ID。所以针对这种关联关系，语法上就有一些特别的语法。
语法格式也是使用eval引入，形如eval=""，不过等号右侧的表达式可以分为多种，具体可分为以下几种。
·（0，_，{'field'：value}）：这是创建一条新记录，并且将新记录关联到本记录。字典里面可以写多个键值对。
·（1，id，{'field'：value}）：更新已在关联记录字段上的值。
·（2，id，_）：断开与关联记录的关系，并且删除关联记录。
·（3，id，_）：断开与关联记录的关系，但是不删除关联记录。原来关联的是一条记录。
·（4，id，_）：关联已存在的记录。
·（5，_，_）：断开与关联记录的关系，但是不删除关联记录。原来关联的是多条记录。
·（6，_，[ids]）：用所提供的列表内的id替换原来的关联记录。
上文介绍中的下划线（_）是一种替代表达，在真正使用的时候请换成0或者False。
以上介绍的是<record>元素的使用，不过回顾我们在第3章中对XML元素的使用，我们还使用了<act_window>、<menuitem>，其实这两个都是对模型的快捷使用，相当于通过缩写引用模型。
        -->
        <!--
        以上介绍的是<record>元素的使用，不过回顾我们在第3章中对XML元素的使用，我们还使用了<act_window>、<menuitem>，其实这两个都是对模型的快捷使用，相当于通过缩写引用模型。
下面我们整理了在XML中，模型使用的快捷方式，具体如下：
<act_window>    ir.actions.act_window
<menuitem>      ir.ui.menu
<report>        ir.actions.report.xml
<template>      ir.ui.view

另外还要强调一点，如果使用快捷方式元素写一条记录，那么最好不要将此方式用于更新已有的记录，因为这种快捷方式不能像<record>元素那样制订字段。要想更新已有记录，还是建议选择<record>元素。
        -->
        <!--
        （3）XML数据内的其他操作
        前面我们介绍了如何通过XML文件进行数据的新增或更新，其实XML文件是可以进行其他类型的操作的，比如删除数据、触发函数等。
下面就对XML文件内的几种其他操作进行简单介绍。
1）删除记录：使用<delete>元素可以删除记录，根据ID属性的值查找要删除的记录，然后执行删除操作。写出来的格式形如以下示例代码：
1.    <delete model="ir.model.access" search="[('id','=',ref('bug-manage.user_rule'))]"/>

这是通过模型，使用ref函数转换出具体的id。
如果我们已经知道具体的ID，那么可以这样写：
1.    <delete model="ir.model.access" id="bug-manage.user_rule_demo"/>

2）触发函数：在XML加载的过程中，我们可以使用<function>元素触发任何函数。通过触发函数我们可以设置演示数据和测试数据。
使用格式如下：
1.    <function model="bm.bug" name="bug_set" eval="[ref('bug_1'),ref('bug_2')],{'install_mode':True},"/>

这里是列举一个例子，name属性代表调用的方法的名称，该方法在model属性引入的bm.bug模型内传递的参数有两个，一个是id列表（例子中的id只是说明，非真实数据），一个是给context用的参数。
3）修改数据：前面已经介绍过通过继承的方式来修改视图，那么应如何修改数据呢。修改数据自然是没有继承方式可以用的，不过我们还是可以通过替换字段中的值来达到修改的目的。使用方式如下：
1.    <record id="x" model="y">

上述XML用法的实际意义是在文件加载的时候对模型y执行新增或者修改操作，如果记录x已经存在则修改，如果不存在则新建。
在使用的时候要注意尽量不要去重写其他模型的数据，这种数据的修改在调试的时候不好找原因。

        -->
    </data>
</odoo>